// This patch causes the RCS to require LH2 when any one of these is installed: 
// CryoEngines, Kerbal Atomics, Rational Resources.

@PART[TeaKettleRCSBrick|TeaKettleRCSDiamond]:NEEDS[CryoEngines|KerbalAtomics|RationalResources,!NTRsUseLF]
{
	@MODULE[ModuleRCSFX]
	{
		@resourceName = LqdHydrogen
		@PROPELLANT
		{
			@name = LqdHydrogen
		}
		@atmosphereCurve
		{
			@key,0 = 0 1296
			@key,1 = 1 259
			@key,2 = 1.25 0.001
		}
	}
	
	// Let's go for 1.62x the Isp values of these fuels as given in RRNF
	IspVacLF = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,0[1, ]$ // get vac Isp number; 800
	IspASLLF = #$MODULE[ModuleRCSFX]/atmosphereCurve/key,1[1, ]$ // get ASL Isp number; 160
	IspVacH2 = 1296 // 606
	IspASLH2 = 259 // - 71%
	IspVacCH4 = 982 // 606
	IspASLCH4 = 285 // - 71%
	IspVacH2O = 600 // 370
	IspASLH2O = 324 // - 46%
	IspVacNH3 = 648 // 400
	IspASLNH3 = 324 // - 50%
	IspVacCO2 = 458 // 283
	IspASLCO2 = 357 // - 22%
	
	// LiquidFuel
	// Calculate ASL thrust
	ThrustSLLF = #$IspASLLF$
	@ThrustSLLF /= #$IspVacLF$
	@ThrustSLLF *= #$MODULE[ModuleRCSFX]/thrusterPower$
	// Regex reduce value to 2dp
	@ThrustSLLF += 0.005
	@ThrustSLLF *= 100
	@ThrustSLLF = #$ThrustSLLF[0,.]$
	@ThrustSLLF /= 100
	// Calculate flameout pressure from Isp gradient: (Isp(Vac) / ( Isp(Vac) - Isp(ASL) ))
	AtmFlameoutLFTemp = #$IspVacLF$
	@AtmFlameoutLFTemp -= #$IspASLLF$
	AtmFlameoutLF = #$IspVacLF$
	@AtmFlameoutLF /= #$AtmFlameoutLFTemp$
	!AtmFlameoutLFTemp = done
	// Regex reduce value to 2dp
	@AtmFlameoutLF += 0.005
	@AtmFlameoutLF *= 100
	@AtmFlameoutLF = #$AtmFlameoutLF[0,.]$
	@AtmFlameoutLF /= 100
	
	// Hydrogen
	// Calculate ASL thrust
	ThrustSLH2 = #$IspASLH2$
	@ThrustSLH2 /= #$IspVacH2$
	@ThrustSLH2 *= #$MODULE[ModuleRCSFX]/thrusterPower$
	// Regex reduce value to 2dp
	@ThrustSLH2 += 0.005
	@ThrustSLH2 *= 100
	@ThrustSLH2 = #$ThrustSLH2[0,.]$
	@ThrustSLH2 /= 100
	// Calculate flameout pressure from Isp gradient: (Isp(Vac) / ( Isp(Vac) - Isp(ASL) ))
	AtmFlameoutH2Temp = #$IspVacH2$
	@AtmFlameoutH2Temp -= #$IspASLH2$
	AtmFlameoutH2 = #$IspVacH2$
	@AtmFlameoutH2 /= #$AtmFlameoutH2Temp$
	!AtmFlameoutH2Temp = done
	// Regex reduce value to 2dp
	@AtmFlameoutH2 += 0.005
	@AtmFlameoutH2 *= 100
	@AtmFlameoutH2 = #$AtmFlameoutH2[0,.]$
	@AtmFlameoutH2 /= 100
	
	// Methane
	// Calculate ASL thrust
	ThrustSLCH4 = #$IspASLCH4$
	@ThrustSLCH4 /= #$IspVacCH4$
	@ThrustSLCH4 *= #$MODULE[ModuleRCSFX]/thrusterPower$
	// Regex reduce value to 2dp
	@ThrustSLCH4 += 0.005
	@ThrustSLCH4 *= 100
	@ThrustSLCH4 = #$ThrustSLCH4[0,.]$
	@ThrustSLCH4 /= 100
	// Calculate flameout pressure from Isp gradient: (Isp(Vac) / ( Isp(Vac) - Isp(ASL) ))
	AtmFlameoutCH4Temp = #$IspVacCH4$
	@AtmFlameoutCH4Temp -= #$IspASLCH4$
	AtmFlameoutCH4 = #$IspVacCH4$
	@AtmFlameoutCH4 /= #$AtmFlameoutCH4Temp$
	!AtmFlameoutCH4Temp = done
	// Regex reduce value to 2dp
	@AtmFlameoutCH4 += 0.005
	@AtmFlameoutCH4 *= 100
	@AtmFlameoutCH4 = #$AtmFlameoutCH4[0,.]$
	@AtmFlameoutCH4 /= 100
	
	// Water
	// Calculate ASL thrust
	ThrustSLH2O = #$IspASLH2O$
	@ThrustSLH2O /= #$IspVacH2O$
	@ThrustSLH2O *= #$MODULE[ModuleRCSFX]/thrusterPower$
	// Regex reduce value to 2dp
	@ThrustSLH2O += 0.005
	@ThrustSLH2O *= 100
	@ThrustSLH2O = #$ThrustSLH2O[0,.]$
	@ThrustSLH2O /= 100
	// Calculate flameout pressure from Isp gradient: (Isp(Vac) / ( Isp(Vac) - Isp(ASL) ))
	AtmFlameoutH2OTemp = #$IspVacH2O$
	@AtmFlameoutH2OTemp -= #$IspASLH2O$
	AtmFlameoutH2O = #$IspVacH2O$
	@AtmFlameoutH2O /= #$AtmFlameoutH2OTemp$
	// Regex reduce value to 2dp
	@AtmFlameoutH2O += 0.005
	@AtmFlameoutH2O *= 100
	@AtmFlameoutH2O = #$AtmFlameoutH2O[0,.]$
	@AtmFlameoutH2O /= 100
	
	// Ammonia
	// Calculate ASL thrust
	ThrustSLNH3 = #$IspASLNH3$
	@ThrustSLNH3 /= #$IspVacNH3$
	@ThrustSLNH3 *= #$MODULE[ModuleRCSFX]/thrusterPower$
	// Regex reduce value to 2dp
	@ThrustSLNH3 += 0.005
	@ThrustSLNH3 *= 100
	@ThrustSLNH3 = #$ThrustSLNH3[0,.]$
	@ThrustSLNH3 /= 100
	// Calculate flameout pressure from Isp gradient: (Isp(Vac) / ( Isp(Vac) - Isp(ASL) ))
	AtmFlameoutNH3Temp = #$IspVacNH3$
	@AtmFlameoutNH3Temp -= #$IspASLNH3$
	AtmFlameoutNH3 = #$IspVacNH3$
	@AtmFlameoutNH3 /= #$AtmFlameoutNH3Temp$
	// Regex reduce value to 2dp
	@AtmFlameoutNH3 += 0.005
	@AtmFlameoutNH3 *= 100
	@AtmFlameoutNH3 = #$AtmFlameoutNH3[0,.]$
	@AtmFlameoutNH3 /= 100
	
	// Carbon Dioxide
	// Calculate ASL thrust
	ThrustSLCO2 = #$IspASLCO2$
	@ThrustSLCO2 /= #$IspVacCO2$
	@ThrustSLCO2 *= #$MODULE[ModuleRCSFX]/thrusterPower$
	// Regex reduce value to 2dp
	@ThrustSLCO2 += 0.005
	@ThrustSLCO2 *= 100
	@ThrustSLCO2 = #$ThrustSLCO2[0,.]$
	@ThrustSLCO2 /= 100
	// Calculate flameout pressure from Isp gradient: (Isp(Vac) / ( Isp(Vac) - Isp(ASL) ))
	AtmFlameoutCO2Temp = #$IspVacCO2$
	@AtmFlameoutCO2Temp -= #$IspASLCO2$
	AtmFlameoutCO2 = #$IspVacCO2$
	@AtmFlameoutCO2 /= #$AtmFlameoutCO2Temp$
	!AtmFlameoutCO2Temp = done
	// Regex reduce value to 2dp
	@AtmFlameoutCO2 += 0.005
	@AtmFlameoutCO2 *= 100
	@AtmFlameoutCO2 = #$AtmFlameoutCO2[0,.]$
	@AtmFlameoutCO2 /= 100
}
@PART[TeaKettleRCSBrick|TeaKettleRCSDiamond]:NEEDS[CryoEngines|KerbalAtomics|RationalResources,!NTRsUseLF]
{
	@description ^= :$: <br><#4FBBFF>RCS can accept other fuels.</color>
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = RCS
		switcherDescription = RCS Mode
		switcherDescriptionPlural = RCS Modes
		switchInFlight = True
		
		SUBTYPE
		{
			name = LF
			title = LiquidFuel
			primaryColor = ResourceColorLiquidFuel
			secondaryColor = ResourceColorLiquidFuel
			descriptionDetail = #The thruster consumes LiquidFuel.<br><b>Isp:</b> $/IspASLLF$ / $/IspVacLF$s <br><b>Thrust:</b> $/ThrustSLLF$ / $/MODULE[ModuleRCSFX]/thrusterPower$ kN<br><b>Flameout</b>: $/AtmFlameoutLF$ atm
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LiquidFuel
					PROPELLANT
					{
						name = LiquidFuel
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					atmosphereCurve
					{
						key = #0 $/IspVacLF$
						key = #1 $/IspASLLF$
						key = #$/AtmFlameoutLF$ 0.001
					}
				}
			}
		}
		SUBTYPE
		{
			name = LH2
			title = Liquid Hydrogen
			primaryColor = ResourceColorLqdHydrogen
			secondaryColor = ResourceColorLqdHydrogen
			defaultSubtypePriority = 1
			descriptionDetail = #The thruster consumes LqdHydrogen.<br><b>Isp:</b> $/IspASLH2$ / $/IspVacH2$s <br><b>Thrust:</b> $/ThrustSLH2$ / $/MODULE[ModuleRCSFX]/thrusterPower$ kN<br><b>Flameout</b>: $/AtmFlameoutH2$ atm
		}
		SUBTYPE
		{
			name = LCH4
			title = Liquid Methane
			primaryColor = ResourceColorLqdMethane
			secondaryColor = ResourceColorLqdMethane
			descriptionDetail = #The thruster consumes LqdMethane.<br><b>Isp:</b> $/IspASLCH4$ / $/IspVacCH4$s <br><b>Thrust:</b> $/ThrustSLCH4$ / $/MODULE[ModuleRCSFX]/thrusterPower$ kN<br><b>Flameout</b>: $/AtmFlameoutCH4$ atm
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LqdMethane
					PROPELLANT
					{
						name = LqdMethane
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					atmosphereCurve
					{
						key = #0 $/IspVacCH4$
						key = #1 $/IspASLCH4$
						key = #$/AtmFlameoutCH4$ 0.001
					}
				}
			}
		}
		SUBTYPE
		{
			name = H2O
			title = Water
			primaryColor = Ocean
			secondaryColor = Ocean
			descriptionDetail = #The thruster consumes Water.<br><b>Isp:</b> $/IspASLH2O$ / $/IspVacH2O$s <br><b>Thrust:</b> $/ThrustSLH2O$ / $/MODULE[ModuleRCSFX]/thrusterPower$ kN <br><b>Flameout</b>: $/AtmFlameoutH2O$ atm
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = Water
					PROPELLANT
					{
						name = Water
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					atmosphereCurve
					{
						key = #0 $/IspVacH2O$
						key = #1 $/IspASLH2O$
						key = #$/AtmFlameoutH2O$ 0.001
					}
				}
			}
		}
		SUBTYPE
		{
			name = NH3
			title = Liquid Ammonia
			primaryColor = BurntRed
			secondaryColor = BurntRed
			descriptionDetail = #The thruster consumes LqdAmmonia.<br><b>Isp:</b> $/IspASLNH3$ / $/IspVacNH3$s <br><b>Thrust:</b> $/ThrustSLNH3$ / $/MODULE[ModuleRCSFX]/thrusterPower$ kN <br><b>Flameout</b>: $/AtmFlameoutNH3$ atm
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LqdAmmonia
					PROPELLANT
					{
						name = LqdAmmonia
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					atmosphereCurve
					{
						key = #0 $/IspVacNH3$
						key = #1 $/IspASLNH3$
						key = #$/AtmFlameoutNH3$ 0.001
					}
				}
			}
		}
		SUBTYPE
		{
			name = CO2
			title = Liquid Carbon Dioxide
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			descriptionDetail = #The thruster consumes LqdCO2.<br><b>Isp:</b> $/IspASLCO2$ / $/IspVacCO2$s <br><b>Thrust:</b> $/ThrustSLCO2$ / $/MODULE[ModuleRCSFX]/thrusterPower$ kN <br><b>Flameout</b>: $/AtmFlameoutCO2$ atm
			MODULE
			{
				IDENTIFIER
				{
					name = ModuleRCSFX
				}
				DATA
				{
					thrusterPower = #$/MODULE[ModuleRCSFX]/thrusterPower$
					resourceName = LqdCO2
					PROPELLANT
					{
						name = LqdCO2
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
					atmosphereCurve
					{
						key = #0 $/IspVacCO2$
						key = #1 $/IspASLCO2$
						key = #$/AtmFlameoutCO2$ 0.001
					}
				}
			}
		}
	}
}

@PART[TeaKettleRCSBrick|TeaKettleRCSDiamond]:NEEDS[CryoEngines|KerbalAtomics|RationalResources,!NTRsUseLF]
{
	!AtmFlameoutH2OTemp = done
	!AtmFlameoutNH3Temp = done
	!IspVac = done
	!IspASL = done
	!IspVacCH4 = done
	!IspASLCH4 = done
	!IspVacH2O = done
	!IspASLH2O = done
	!IspVacNH3 = done
	!IspASLNH3 = done
	!ThrustSL = done
	!ThrustSLCH4 = done
	!AtmFlameoutCH4 = done
	!ThrustSLH2O = done
	!AtmFlameoutH2O = done
	!ThrustSLNH3 = done
	!AtmFlameoutNH3 = done
	!ThrustSLCO2 = done
	!AtmFlameoutCO2 = done
}